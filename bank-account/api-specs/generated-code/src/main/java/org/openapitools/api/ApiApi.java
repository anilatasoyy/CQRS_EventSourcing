/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.math.BigDecimal;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-09T22:28:45.584723300+03:00[Europe/Istanbul]")
@Validated
@Tag(name = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/v1/bankAccountLookup/byHolder/{accountHolder} : Get a bank account by holder
     *
     * @param accountHolder  (required)
     * @return Bank account retrieved successfully (status code 200)
     *         or No content (status code 204)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiV1BankAccountLookupByHolderAccountHolderGet",
        summary = "Get a bank account by holder",
        responses = {
            @ApiResponse(responseCode = "200", description = "Bank account retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "204", description = "No content", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/bankAccountLookup/byHolder/{accountHolder}",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> apiV1BankAccountLookupByHolderAccountHolderGet(
        @Parameter(name = "accountHolder", description = "", required = true, in = ParameterIn.PATH) @PathVariable("accountHolder") String accountHolder
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/bankAccountLookup/byId/{id} : Get a bank account by ID
     *
     * @param id  (required)
     * @return Bank account retrieved successfully (status code 200)
     *         or No content (status code 204)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiV1BankAccountLookupByIdIdGet",
        summary = "Get a bank account by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Bank account retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "204", description = "No content", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/bankAccountLookup/byId/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> apiV1BankAccountLookupByIdIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/bankAccountLookup : Get all bank accounts
     *
     * @return Bank accounts retrieved successfully (status code 200)
     *         or No content (status code 204)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiV1BankAccountLookupGet",
        summary = "Get all bank accounts",
        responses = {
            @ApiResponse(responseCode = "200", description = "Bank accounts retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "204", description = "No content", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/bankAccountLookup",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> apiV1BankAccountLookupGet(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/bankAccountLookup/withBalance/{equalityType}/{balance} : Get bank accounts by balance
     *
     * @param equalityType  (required)
     * @param balance  (required)
     * @return Bank accounts retrieved successfully (status code 200)
     *         or No content (status code 204)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiV1BankAccountLookupWithBalanceEqualityTypeBalanceGet",
        summary = "Get bank accounts by balance",
        responses = {
            @ApiResponse(responseCode = "200", description = "Bank accounts retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "204", description = "No content", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/bankAccountLookup/withBalance/{equalityType}/{balance}",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> apiV1BankAccountLookupWithBalanceEqualityTypeBalanceGet(
        @Parameter(name = "equalityType", description = "", required = true, in = ParameterIn.PATH) @PathVariable("equalityType") String equalityType,
        @Parameter(name = "balance", description = "", required = true, in = ParameterIn.PATH) @PathVariable("balance") BigDecimal balance
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/closeBankAccount/{id} : Close a bank account
     *
     * @param id  (required)
     * @return Bank account closed successfully (status code 200)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiV1CloseBankAccountIdDelete",
        summary = "Close a bank account",
        responses = {
            @ApiResponse(responseCode = "200", description = "Bank account closed successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/closeBankAccount/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> apiV1CloseBankAccountIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/openBankAccount : Create a new bank account
     *
     * @param body  (required)
     * @return Bank account created successfully (status code 201)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiV1OpenBankAccountPost",
        summary = "Create a new bank account",
        responses = {
            @ApiResponse(responseCode = "201", description = "Bank account created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/openBankAccount",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Object> apiV1OpenBankAccountPost(
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/restoreReadDb : Restore the read database
     *
     * @return Read database restored successfully (status code 200)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiV1RestoreReadDbPost",
        summary = "Restore the read database",
        responses = {
            @ApiResponse(responseCode = "200", description = "Read database restored successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/restoreReadDb",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> apiV1RestoreReadDbPost(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/withdrawFunds/{id} : Withdraw funds from a bank account
     *
     * @param id  (required)
     * @param body  (required)
     * @return Funds withdrawn successfully (status code 200)
     *         or Bad request (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "apiV1WithdrawFundsIdPut",
        summary = "Withdraw funds from a bank account",
        responses = {
            @ApiResponse(responseCode = "200", description = "Funds withdrawn successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/v1/withdrawFunds/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Object> apiV1WithdrawFundsIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody Object body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
